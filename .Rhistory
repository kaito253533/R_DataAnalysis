max_mass <- max(landings$mass)
cat("min of year: ", min_year, "\n")
cat("max of year: ", max_year, "\n")
cat("min of mass: ", min_mass, "\n")
cat("max of mass: ", max_mass, "\n")
# What is the standard deviation, mean, and median values for the year and mass?
sd_year <- sd(landings$year)
sd_mass <- sd(landings$mass)
sprintf("standard deviation of year: %.2f", sd_year)
sprintf("standard deviation of mass: %.2f", sd_mass)
mean_year <- mean(landings$year)
mean_mass <- mean(landings$mass)
sprintf("mean of year: %.2f", mean_year)
sprintf("mean of mass: %.2f", mean_mass)
median_year <- median(landings$year)
median_mass <- median(landings$mass)
sprintf("median of year: %i", median_year)
sprintf("median of mass: %i", median_mass)
library(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
library(ggmap)
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
library(ggmap)
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
library(ggmap)
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
library(ggmap)
# Write your solution here.
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
library(ggmap)
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
library(ggmap)
require(ggmap)
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
install_github("dkahle/ggmap", ref = "tidyup")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
# Use this space to install your libraries.
devtools::install_github("dkahle/ggmap", ref = "tidyup")
# Use this space to install your libraries.
devtools::install_github("dkahle/ggmap")
# Use this space to install your libraries.
devtools::install_github("dkahle/ggmap")
# Use this space to install your libraries.
library(ggmap)
# Write your solution here.
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
# Use this space to install your libraries.
library(ggmap)
# Write your solution here.
require(ggmap)
require(ggplot2)
map0 <- get_map(location ="Australia", zoom = 4)
# Use this space to install your libraries.
library(ggmap)
# Write your solution here.
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
# Use this space to install your libraries.
library(ggmap)
# Write your solution here.
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
library(ggmap)
# Write your solution here.
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
# Use this space to install your libraries.
devtools::install_github("dkahle/ggmap")
# Use this space to install your libraries.
library(ggmap)
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
# register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
# register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
require(ggmap)
map0 <- get_map(location ="Australia", zoom = 4)
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
# register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
require(ggmap)
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres", write(TRUE))
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres", write=TRUE)
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
devtools::install_github("dkahle/ggmap", ref = "tidyup")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
devtools::install_github("dkahle/ggmap", ref = "BH")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
devtools::install_github("dkahle/ggmap", ref = "BH")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
devtools::install_github("dkahle/ggmap", ref = "BH")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
devtools::install_github("dkahle/ggmap", ref = "")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
devtools::install_github("dkahle/ggmap")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
devtools::install_github("dkahle/ggmap", "R6")
version
updateR()
update.packages(R)
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
devtools::install_github("dkahle/ggmap", "R6")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
require(ggplot2)
devtools::install_github("dkahle/ggmap", "R6")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
require(ggplot2)
devtools::install_github("dkahle/ggmap")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
require(ggplot2)
devtools::install_github("dkahle/ggmap", "R6")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
require(ggplot2)
citation('ggmap')
devtools::install_github("dkahle/ggmap", "R6")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
require(ggplot2)
citation('ggmap')
devtools::install_github("dkahle/ggmap")
# Write your solution here.
map0 <- get_map(location ="Australia", zoom = 4)
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
require(ggplot2)
citation('ggmap')
devtools::install_github("dkahle/ggmap")
# Write your solution here.
register_google(key = AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres)
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Use this space to install your libraries.
library(ggmap)
library(ggplot2)
require(devtools)
require(ggmap)
require(ggplot2)
citation('ggmap')
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("dkahle/ggmap", ref = "tidyup", force = TRUE)
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
ggmap::register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
# Write your solution here.
load("ggmap")
# Write your solution here.
library("ggmap")
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
map0 <- get_map(location ="Australia", zoom = 4)
ggmap(map0) + geom_point(aes(x = landings$reclong, y = landings$reclat), data=landings, color="red")
# Write your solution here.
library("ggmap")
library("ggplot2")
register_google(key = "AIzaSyCNj2OBQVrWl6bJutLOjKIMuGgThwyHres")
map0 <- get_map(location ="Australia", zoom = 4)
ggmap(map0) + geom_point(aes(x = landings$reclong, y = landings$reclat), data=landings, color="red")
# Write your solution here.
library("ggmap")
library("ggplot2")
register_google(key = "AIzaSyAZGKj4WpJUtwOc3hOpiekwogdMUIU9qh0")
map0 <- get_map(location ="Australia", zoom = 4)
ggmap(map0) + geom_point(aes(x = landings$reclong, y = landings$reclat), data=landings, color="red")
# Use this space to load and clean the data.
# 1. Ensure there are no 0 values for latitude and longitude.
# 2. Ensure the year value is not NA, is less than or equal to 2016 and larger than 1800.
# 3. Ensure that no mass values are NA.
landings <- read.csv("Practice/meteorite-landings.csv")
landings <- landings[landings$reclat != 0,]
landings <- landings[landings$reclong != 0,]
landings <- landings[!is.na(landings$year),]
landings <- landings[landings$year > 1800,]
landings <- landings[landings$year <= 2016,]
landings <- landings[!is.na(landings$mass),]
# Use this space to load and clean the data.
# 1. Ensure there are no 0 values for latitude and longitude.
# 2. Ensure the year value is not NA, is less than or equal to 2016 and larger than 1800.
# 3. Ensure that no mass values are NA.
landings <- read.csv("Practice/meteorite-landings.csv")
landings <- landings[landings$reclat != 0,]
landings <- landings[landings$reclong != 0,]
landings <- landings[!is.na(landings$year),]
landings <- landings[landings$year > 1800,]
landings <- landings[landings$year <= 2016,]
landings <- landings[!is.na(landings$mass),]
# How many records are there?
num_records <- nrow(landings)
sprintf("The number of records: %i", num_records)
# How many classes of meteorite are there?
num_classes <- length(unique(landings$recclass))
sprintf("The number of the classes of meteorite: %i", num_classes)
# What are the minimum and maximum values for year and mass?
min_year <- min(landings$year)
max_year <- max(landings$year)
min_mass <- min(landings$mass)
max_mass <- max(landings$mass)
cat("min of year: ", min_year, "\n")
cat("max of year: ", max_year, "\n")
cat("min of mass: ", min_mass, "\n")
cat("max of mass: ", max_mass, "\n")
# What is the standard deviation, mean, and median values for the year and mass?
sd_year <- sd(landings$year)
sd_mass <- sd(landings$mass)
sprintf("standard deviation of year: %.2f", sd_year)
sprintf("standard deviation of mass: %.2f", sd_mass)
mean_year <- mean(landings$year)
mean_mass <- mean(landings$mass)
sprintf("mean of year: %.2f", mean_year)
sprintf("mean of mass: %.2f", mean_mass)
median_year <- median(landings$year)
median_mass <- median(landings$mass)
sprintf("median of year: %i", median_year)
sprintf("median of mass: %i", median_mass)
library(ggmap)
require(ggmap)
register_google(key = "AIzaSyAZGKj4WpJUtwOc3hOpiekwogdMUIU9qh0")
map0 <- get_map(location ="Australia", zoom = 4)
ggmap(map0) + geom_point(aes(x = landings$reclong, y = landings$reclat), data=landings, color="red")
# Write your solution here.
ggmap(map0) + geom_point(data=landings, aes(x = landings$reclong, y = landings$reclat, size = landings$mass, color=landings$year))
# Write your solution here.
ggmap(map1) + stat_density2d(aes(x = landings$reclong, y = landings$reclat), alpha=0.5, size=2, bins= 30, geom = "polygon", data=landings) +  geom_density_2d(data=landings, aes(x = landings$reclong, y = landings$reclat), alpha=0.5, bins= 30)
# Write your solution here.
map2 <- get_map(location ="USA", zoom = 4, maptype = "satellite")
ggmap(map2) + stat_bin_2d(aes(x = landings$reclong, y = landings$reclat), size = .1, bins = 30, alpha = 0.8, data=landings)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
install.packages("lubridate")
install.packages("ggplot2")
install.packages("ggmap")
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
library(ggmap)
library(ggplot2)
library(lubridate)
library(plyr)
library(lsa)
library(magrittr)
library(dplyr)
# Read csv file and put into variables
d1 <- read.csv("/Users/lexi/Documents/IFN 509/pi2_data/uber-raw-data-apr14.csv")
# Read csv file and put into variables
d1 <- read.csv("Practice/pi2_data/uber-raw-data-apr14.csv")
d2 <- read.csv("Practice/pi2_data/uber-raw-data-may14.csv")
d3 <- read.csv("Practice/pi2_data/uber-raw-data-jun14.csv")
d4 <- read.csv("Practice/pi2_data/uber-raw-data-jul14.csv")
d5 <- read.csv("Practice/pi2_data/uber-raw-data-aug14.csv")
d6 <- read.csv("Practice/pi2_data/uber-raw-data-sep14.csv")
# Combine all data into a variables 'data'
data <- rbind(d1, d2, d3, d4, d5, d6)
# Use mdy_hms function to transfer 'Date.Time' into date format
date <- mdy_hms(data$Date.Time, tz="America/New_York")
# Get the day of week value from date formate
dt <- wday(date, label = TRUE)
# Add a column 'day' into the original data set.
data$day <- wday(date, label = TRUE)
# Use table funtion to get frequency for every day of week
result <- table(data$day)
# Put the result into a data frame to estiblish a figure
df_result <- data.frame(result)
# Name the df_result.
names(df_result) <- c("Day of Week", "Frequency")
head(df_result)
View(d1)
# Use ggplot to initiate a figure, and  set the x axis and y axis. Use geom_bar to draw a bar chat on it, and also set x label and y label. Finally, use scale_fill_manual to fill the color, and set the title and subtitle, then adjust the x axis.
theme_set(theme_classic())
ggplot(df_result, aes(x=df_result$`Day of Week`, y=df_result$Frequency, fill=`Day of Week`)) +
geom_bar(stat="identity", width=0.5) +
xlab("Day of Week") + ylab("Total Amount") +
scale_fill_manual(values=c("#26FFFF", "#00F0F0", "#00D6D6", "#00BDBD", "#00A3A3", "#008A8A", "#008585")) +
labs(title="Task 1.1 Figure", subtitle="Frequency of Day of Week") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
View(d1)
View(d1)
# Combine all data into a variables 'data'
data <- rbind(d1, d2, d3, d4, d5, d6)
# Use mdy_hms function to transfer 'Date.Time' into date format
date <- mdy_hms(data$Date.Time, tz="America/New_York")
# Get the day of week value from date formate
dt <- wday(date, label = TRUE)
# Add a column 'day' into the original data set.
data$day <- wday(date, label = TRUE)
# Use table funtion to get frequency for every day of week
result <- table(data$day)
result
# Put the result into a data frame to estiblish a figure
df_result <- data.frame(result)
# Name the df_result.
names(df_result) <- c("Day of Week", "Frequency")
head(df_result)
# Combine all data into a variables 'data'
data <- rbind(d1, d2, d3, d4, d5, d6)
# Use mdy_hms function to transfer 'Date.Time' into date format
date <- mdy_hms(data$Date.Time, tz="America/New_York")
# Get the day of week value from date formate
dt <- wday(date, label = TRUE)
# Add a column 'day' into the original data set.
data$day <- wday(date, label = TRUE)
# Use table funtion to get frequency for every day of week
result <- table(data$day)
# Put the result into a data frame to estiblish a figure
df_result <- data.frame(result)
# Name the df_result.
names(df_result) <- c("Day of Week", "Frequency")
head(df_result)
# Use month function to get the value from date, and add a new column into data set.
data$month <- month(date)
# Use table funtion to get frequency for month
result_month <- table(data$month)
# Put the result into a data frame
df_result_month <- data.frame(result_month)
# Name the data
names(df_result_month) <- c("Month", "Frequency")
head(df_result_month)
theme_set(theme_bw())
# Use ggplot to initiate a figure, and  set the x axis and y axis. Use geom_line to draw a line chat on it, and also set x label and y label. In addition, Put the point by geom_point to show the exact point for each month. Finally, set the title and subtitle.
ggplot(data=df_result_month, aes(x=df_result_month$Month, y=df_result_month$Frequency, group=1)) +
geom_line(color="#00DDDD") +
xlab("Month") + ylab("Total Amount") +
geom_point(color="#0044BB") +
labs(title="Task 1.2 Figure", subtitle="Frequency of Month")
# Use hour function to get the hour value from date.
data$hour <- hour(date)
# Use table function to calculate the frequency of each hour.
result_hour <- table(data$hour)
# Put the result into a data frame.
df_result_hour <- data.frame(result_hour)
# Name the result
names(df_result_hour) <- c("Hour", "Frequency")
head(df_result_hour)
# Use ggplot to initiate a figure, and  set the x axis and y axis. Use geom_bar to draw a bar chat on it, and also set x label and y label. In addition, change the width if bars. Finally, set the title and subtitle.
ggplot(df_result_hour, aes(x=df_result_hour$Hour, y=df_result_hour$Frequency, fill=Hour)) +
geom_bar(stat="identity", width=0.5 ) +
xlab("Hour of day") + ylab("Total Amount") +
labs(title="Task 1.3 Figure", subtitle="Frequency of Hour")
# Because of the efficacy of laptop, I just use April data to establish this figure
data_map <- d1
# Use get_map function to initiate a map with zoom = 8, for showing the clearer result, although there is a missing value.
map0 <- get_map(location ="NewYork", zoom = 8)
# Because of the efficacy of laptop, I just use April data to establish this figure
data_map <- d1
# Use get_map function to initiate a map with zoom = 8, for showing the clearer result, although there is a missing value.
library(ggmap)
require(ggmap)
register_google(key = "AIzaSyAZGKj4WpJUtwOc3hOpiekwogdMUIU9qh0")
map0 <- get_map(location ="NewYork", zoom = 8)
# Put all data on the map in terms of longitude and latitude.
ggmap(map0) +
geom_point(aes(x = data_map$Lon, y = data_map$Lat), data=data_map, color="#77DDFF", size=1) +
labs(title="Task 2.0 Figure", subtitle="Uber Pick Up Location")
# Because of the efficacy of laptop, I just use April data to establish this figure
data_map <- d1
# Use get_map function to initiate a map with zoom = 8, for showing the clearer result, although there is a missing value.
library(ggmap)
require(ggmap)
register_google(key = "AIzaSyAZGKj4WpJUtwOc3hOpiekwogdMUIU9qh0")
map0 <- get_map(location ="NewYork", zoom = 8)
# Put all data on the map in terms of longitude and latitude.
ggmap(map0) +
geom_point(aes(x = data_map$Lon, y = data_map$Lat), data=data_map, color="#77DDFF", size=1) +
labs(title="Task 2.0 Figure", subtitle="Uber Pick Up Location")
# Transfer the date column which is text format into date format.
date_map <- mdy_hms(data_map$Date.Time, tz="America/New_York")
# Add a column called day into the data set.
data_map$day <- wday(date_map, label = TRUE)
head(data_map)
# Transfer the date column which is text format into date format.
date_map <- mdy_hms(data_map$Date.Time, tz="America/New_York")
# Add a column called day into the data set.
data_map$day <- wday(date_map, label = TRUE)
head(data_map)
# Use get_map function to initiate a map with zoom = 10, for showing the clearer result, although there is some missing values.
map_month <- get_map(location ="NewYork", zoom = 10)
# Use geom_point function to put points in the map, and use facet_wrap function to establish 7 figures to seperate the map into different day of week.
ggmap(map_month) +
geom_point(data=data_map, aes(x = data_map$Lon, y = data_map$Lat), color="#77DDFF", size=0.1) +
facet_wrap(~day, ncol = 4) +
labs(title="Task 2.1 Figure", subtitle="Uber Pick Up Location in Different Days")
# Combine three months into a data set.
data_map_month <- rbind(d1, d2, d3)
# Transfer the column which contains the date text into the date format.
date_map_month <- mdy_hms(data_map_month$Date.Time, tz="America/New_York")
# Add a new column into the data set.
data_map_month$month <- month(date_map_month)
head(data_map_month)
# Use geom_point function to draw points on the map.
ggmap(map0) +
geom_point(data=data_map_month, aes(x = data_map_month$Lon, y = data_map_month$Lat), color="#5555FF", size=0.1) +
facet_wrap(~month) +
labs(title="Task 2.2 Figure", subtitle="Uber Pick Up Location in Different Months")
# Because of the efficacy of laptop, I just use April data to establish this figure
data_map_hour <- d1
# Transfer the column which contains the date text into the date format.
date_map_hour <- mdy_hms(data_map_hour$Date.Time, tz="America/New_York")
# Use hour function to get the hour value into the new column of the data set.
data_map_hour$hour <- hour(date_map_hour)
head(data_map_hour)
map0 <- get_map(location ="NewYork", zoom = 9)
# Use geom_point function to draw points on the map.
ggmap(map0) +
geom_point(data=data_map_hour, aes(x = data_map_hour$Lon, y = data_map_hour$Lat ), color="#5555FF", size=0.1) +
facet_wrap(~hour, ncol=8) +
labs(title="Task 2.3 Figure", subtitle="Uber Pick Up Location in Different Hours")
# Use get_map function to initiate a map with zoom = 13, for showing the clearer result, although there is some missing values.
map1 <- get_map(location ="NewYork", zoom = 13)
# Use geom_density2d function to draw a density plot on the map.
ggmap(map1) + geom_density2d(data = data_map, aes(x = data_map$Lon, y = data_map$Lat)) +
stat_density2d(data = data_map, aes(x = data_map$Lon, y = data_map$Lat, fill = 4, alpha = 4),
size = 0.01, bins = 16, geom = 'polygon') +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0.00, 0.25), guide = FALSE) +
labs(title="Task 2.0 Figure", subtitle="Uber Pick Up Location") +
theme(legend.position = "none", axis.title = element_blank(), text = element_text(size = 12))
