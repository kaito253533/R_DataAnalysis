head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill = normalized_Fre)) +
geom_tile(aes(fill = log(normalized_Fre)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f",normalized_Fre))) +
theme(legend.position = "none") +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill = log(normalized_Fre))) +
geom_tile(aes(fill = log(normalized_Fre)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f",normalized_Fre))) +
theme(legend.position = "none") +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference)) +
geom_tile(aes(fill = log(normalized_Fre)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f",normalized_Fre))) +
theme(legend.position = "none") +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference)) +
geom_tile(aes(fill = normalized_Fre), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f",normalized_Fre))) +
theme(legend.position = "none") +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference)) +
geom_tile(aes(fill = log(normalized_Fre)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f",normalized_Fre))) +
theme(fill=normalized_Fre) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= normalized_Fre)) +
geom_tile(aes(fill = log(normalized_Fre)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
theme(fill=normalized_Fre) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= normalized_Fre)) +
geom_tile(aes(fill = log(normalized_Fre)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
#theme(fill=normalized_Fre) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= log(normalized_Fre))) +
geom_tile(aes(fill = log(normalized_Fre)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= normalized_Fre)) +
geom_tile(aes(fill = log(normalized_Fre)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= normalized_Fre)) +
geom_tile(aes(fill = normalized_Fre), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= normalized_Fre)) +
geom_tile(aes(fill = normalized_Fre), colour = "white") +
scale_fill_gradient(low = "red", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= normalized_Fre)) +
geom_tile(aes(fill = normalized_Fre), colour = "white") +
scale_fill_gradient(low = "#132B43", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= normalized_Fre)) +
geom_tile(aes(fill = normalized_Fre), colour = "white") +
scale_fill_gradient(low = muted("red"), high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= normalized_Fre)) +
geom_tile(aes(fill = normalized_Fre), colour = "white") +
scale_fill_gradient(low = "#99FFFF", high = "steelblue") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= normalized_Fre)) +
geom_tile(aes(fill = normalized_Fre), colour = "white") +
scale_fill_gradient(low = "#99FFFF", high = "#003C9D") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
library(ggplot2)
table_cm <- as.data.frame(cm$table)
names(table_cm) <- c("Prediction", "Reference", "Freq")
table_cm$normalized_Fre <- (table_cm$Freq-min(table_cm$Freq))/(max(table_cm$Freq)-min(table_cm$Freq))
head(table_cm)
ggplot(data = table_cm ,
aes(x = Prediction, y = Reference, fill= normalized_Fre)) +
geom_tile(aes(fill = normalized_Fre), colour = "white") +
scale_fill_gradient(low = "#DDDDDD", high = "#003C9D") +
geom_text(aes(x = Prediction, y = Reference, label = sprintf("%.3f", normalized_Fre))) +
labs(title="Task 2.b Figure", subtitle="Heatmap of Prediction")
plot(yeast_ctree, title="test")
# c() is a function that concatenates the values you pass to it.
vec <- c(50, 29, 11, 93)
vec
vec[0] # the type of the vector.
vec[1] # vec[1] is 50.
vec[2] # vec[2] is
vec[3] # vec[3] is
vec[4] # vec[4] is
vec[0] # the type of the vector.
vec[1] # vec[1] is 50.
vec[2] # vec[2] is
vec[3] # vec[3] is
vec[4] # vec[4] is
vec[5]
# Inspect the human-readable (string) version of the factor:
str(vecf)
vec <- c(6, 3, 2, 3)
# Create a factor from our vector
vecf <- factor(vec)
vecf
# Inspect the human-readable (string) version of the factor:
str(vecf)
# Get the index of the values in the factor, meaning:
# values 6 3 2 3
# index  3 2 1 2
unclass(vecf)
# If instead we just want the levels of the factor, we can use levels:
levels(vecf)
people <- c("male", "male", "female", "male", "female", "female", "male", "male", "male", "male", "female", "female")
peoplef <- factor(people)
# Now what do we have?
str(peoplef)
# What are the unique values?
levels(peoplef)
# What is the distribution of males to females?
table(peoplef)
# The colours we would like to use for plotting (vector of colour)
#palette(c("red", "green", "blue"))
# use species to set up colour
plot(i$Petal.Length, i$Petal.Width, col=factor(i$Species), xlab="Petal Length", ylab="Petal Width")
# Assign the dataset to the variable i
i <- iris
# Get the names of the frame, name means columns
names(i)
# Get the data from a single column
i$Sepal.Length
# Index a row in a column
i$Sepal.Length[10]
# Index a row-column
i[10,1]
plot(i$Sepal.Length, i$Sepal.Width, col=factor(i$Species), xlab="Sepal Length", ylab="Sepal Width")
legend(x="topleft", legend=levels(i$Species), col=unique(i$Species), pch=1)
plot(i$Sepal.Length, i$Sepal.Width, col=level(i$Species), xlab="Sepal Length", ylab="Sepal Width")
plot(i$Sepal.Length, i$Sepal.Width, col=factor(i$Species), xlab="Sepal Length", ylab="Sepal Width")
legend(x="topleft", legend=levels(i$Species), col=unique(i$Species), pch=1)
plot(i$Sepal.Length, i$Sepal.Width, col=factor(i$Species), xlab="Sepal Length", ylab="Sepal Width")
legend(x="topleft", legend=levels(i$Species), col=level(i$Species), pch=1)
plot(i$Sepal.Length, i$Sepal.Width, col=factor(i$Species), xlab="Sepal Length", ylab="Sepal Width")
legend(x="topleft", legend=levels(i$Species), col=unique(i$Species), pch=1)
subset(i, i$Sepal.Width < 2.4)
subset(i, i$Sepal.Length < 4.5 | (i$Petal.Length < 5 & i$Petal.Length > 4 ))
subset(i, TRUE)
info <- aggregate(i$Sepal.Length, FUN=mean, by=list(Species = i$Species))
plot(info)
aggregate(i$Petal.Length, FUN=sum, by=list(Species=i$Species))
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
fit = rpart(Localisation_Site ~ mcg + gvh + alm + mit + erl + pox + vac + nuc, train_data, parms=list(split="gini"))
library(party)
library(caret)
library(rpart)
fit = rpart(Localisation_Site ~ mcg + gvh + alm + mit + erl + pox + vac + nuc, train_data, parms=list(split="gini"))
fit$variable.importance
set.seed(1234)
# The ciris data is a temporary dataframe without a species variable
ciris <- iris
ciris$Species <- NULL
# Cluster the four remaining variables
kmeans.result <- kmeans(ciris, 3)
kmeans.result
library(ggplot2)
library(gridExtra) #package 'gridExtra' was built under R version 3.4.4
# Load the iris data set into a new data frame
df <- iris
# Add a variable to the data frame for the clustered data
df$Clusters <- factor(kmeans.result$cluster)
# Label the clusters from k-means with the actual predicted label instead of a number
# Comment this line out if you want to see what happens if we keep the numbers.
# This won't work when k!=3, so you'll need to comment it out to play.
df$Clusters <- factor(df$Clusters, labels=levels(df$Species))
# Finally, extract the ceters for later use
centers <- as.data.frame(kmeans.result$centers)
# Let's now make some plots!
p1 <- ggplot(data=df, aes(x=Petal.Length, y=Petal.Width, color=Clusters)) + geom_point() + geom_point(data=centers, aes(x=Petal.Length, y=Petal.Width, color='center'), shape='X', size=5, show.legend=FALSE)
p2 <- ggplot(data=df, aes(x=Sepal.Length, y=Sepal.Width, color=Clusters)) + geom_point() + geom_point(data=centers, aes(x=Sepal.Length, y=Sepal.Width, color='center'), shape='X', size=5, show.legend=FALSE)
p3 <- ggplot(data=df, aes(x=Sepal.Length, y=Petal.Width, color=Clusters)) + geom_point() + geom_point(data=centers, aes(x=Sepal.Length, y=Petal.Width, color='center'), shape='X', size=5, show.legend=FALSE)
p4 <- ggplot(data=df, aes(x=Petal.Length, y=Sepal.Width, color=Clusters)) + geom_point() + geom_point(data=centers, aes(x=Petal.Length, y=Sepal.Width, color='center'), shape='X', size=5, show.legend=FALSE)
grid.arrange(p1, p2, p3, p4, ncol=2)
knitr::opts_chunk$set(echo = TRUE)
Average_101 <- read.csv("/Users/lexi/Documents/DataAnalysis/Taiwan_Job/101年_青年勞工現職工作平均每月薪資.csv")
Average_101
Average_101 <- read.csv("/Users/lexi/Documents/DataAnalysis/Taiwan_Job/101年_青年勞工現職工作平均每月薪資.csv")
Average_103 <- read.csv("/Users/lexi/Documents/DataAnalysis/Taiwan_Job/103年_青年勞工現職工作平均每月薪資.csv")
Average_105 <- read.csv("/Users/lexi/Documents/DataAnalysis/Taiwan_Job/105年_青年勞工現職工作平均每月薪資.csv")
View(Average_103)
Average_101$平均每月薪資.元.
Average_101[1,1]
Average_101[2,1]
Average_101[3,1]
Average_101[1,5]
Average_101[1,13]
101_Male<-Average_101[1,"平均每月薪資（元）"]
101_Male<-Average_101[1,"平均薪資(元)"]
101_Male<-Average_101[1,"平均每月薪資(元)"]
101_Male<-Average_101[1,13]
101_Male <- Average_101[1,13]
101_Male <- Average_101[1,11]
Average_101_M <- Average_101[1,11]
Average_101_M <- Average_101[1,"平均每月薪資（元）"]
Average_101_M <- Average_101[1,"平均每月薪資（元）"]
Average_101_M
Average_101_M <- Average_101[1,13]
Average_101_M
Average_101_M <- Average_101[1,13]
Average_101_F <- Average_101[2,13]
Average_101_M <- Average_101[1,13]
Average_101_F <- Average_101[2,13]
Average_101_M
Average_101_F
Average_101_M <- Average_101[1,13]
Average_101_F <- Average_101[2,13]
Average_101_M
Average_101_F
Average_103_M <- Average_103[1,13]
Average_103_F <- Average_103[2,13]
Average_103_M
Average_103_F
Average_105_M <- Average_105[1,13]
Average_105_F <- Average_105[2,13]
Average_105_M
Average_105_F
Average_101_M <- Average_101[1,13]
Average_101_F <- Average_101[2,13]
Average_101_M
Average_101_F
Average_103_M <- Average_103[1,13]
Average_103_F <- Average_103[2,13]
Average_103_M
Average_103_F
Average_105_M <- Average_105[1,11]
Average_105_F <- Average_105[2,11]
Average_105_M
Average_105_F
Average_101_M <- Average_101[1,13]
Average_101_F <- Average_101[2,13]
Average_101_M
Average_101_F
Average_103_M <- Average_103[1,13]
Average_103_F <- Average_103[2,13]
Average_103_M
Average_103_F
Average_105_M <- Average_105[1,12]
Average_105_F <- Average_105[2,12]
Average_105_M
Average_105_F
Average_101_M <- Average_101[1,13]
Average_101_F <- Average_101[2,13]
Average_103_M <- Average_103[1,13]
Average_103_F <- Average_103[2,13]
Average_105_M <- Average_105[1,12]
Average_105_F <- Average_105[2,12]
M_Average <- c(Average_101_M, Average_103_M, Average_105_M)
M_Average
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
ggplot(data=M_Average, aes(x=time, y=total_bill, group=1)) +
geom_line(colour="red", linetype="dashed", size=1.5) +
geom_point(colour="red", size=4, shape=21, fill="white")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
ggplot(data=M_Average, aes(x=time, y=total_bill, group=1)) +
geom_line(colour="red", linetype="dashed", size=1.5) +
geom_point(colour="red", size=4, shape=21, fill="white")
ggplot2(data=M_Average, aes(x=time, y=total_bill, group=1)) +
geom_line(colour="red", linetype="dashed", size=1.5) +
geom_point(colour="red", size=4, shape=21, fill="white")
install.packages("ggplot")
library(ggplot)
library(ggplot2)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
qplot(diamonds$carat, diamonds$price)
library(ggplot2)
dat <- data.frame(
time = factor(c("101","103","105"), levels=c("101","103","105")),
average = M_Average
)
dat
library(ggplot2)
dat <- data.frame(
year = factor(c("101","103","105"), levels=c("101","103","105")),
average = M_Average
)
dat
ggplot(data=dat, aes(x=year, y=average, group=1)) +
geom_line()
library(ggplot2)
dat <- data.frame(
Year = factor(c("101","103","105"), levels=c("101","103","105")),
Average = M_Average
)
dat
ggplot(data=dat, aes(x=Year, y=Average, group=1)) +
geom_line()
library(ggplot2)
dat <- data.frame(
Sex = factor("M", "M", "M", "F", "F", "F")
Year = factor(c("101","103","105"), levels=c("101","103","105")),
library(ggplot2)
dat <- data.frame(
Sex = factor("M", "M", "M", "F", "F", "F"),
Year = factor(c("101","103","105"), levels=c("101","103","105")),
Average = Total_Average
)
Average_101_M <- Average_101[1,13]
Average_101_F <- Average_101[2,13]
Average_103_M <- Average_103[1,13]
Average_103_F <- Average_103[2,13]
Average_105_M <- Average_105[1,12]
Average_105_F <- Average_105[2,12]
M_Average <- c(Average_101_M, Average_103_M, Average_105_M)
F_Average <- c(Average_101_F, Average_103_F, Average_105_F)
Total_Average <- c(M_Average, F_Average)
library(ggplot2)
dat <- data.frame(
Sex = factor("M", "M", "M", "F", "F", "F"),
Year = factor(c("101","103","105"), levels=c("101","103","105")),
Average = Total_Average
)
dat
ggplot(data=dat, aes(x=Year, y=Average, group=Sex, colour=Sex) +
geom_line()
library(ggplot2)
dat <- data.frame(
Sex = factor(c("M", "M", "M", "F", "F", "F")),
Year = factor(c("101","103","105"), levels=c("101","103","105")),
Average = Total_Average
)
dat
ggplot(data=dat, aes(x=Year, y=Average, group=Sex, colour=Sex) +
geom_line()
library(ggplot2)
dat <- data.frame(
Sex = factor(c("M", "M", "M", "F", "F", "F")),
Year = factor(c("101","103","105"), levels=c("101","103","105")),
Average = Total_Average
)
dat
ggplot(data=dat, aes(x=Year, y=Average, group=Sex) +
geom_line()
library(ggplot2)
dat <- data.frame(
Sex = factor(c("M", "M", "M", "F", "F", "F")),
Year = factor(c("101","103","105"), levels=c("101","103","105")),
Average = Total_Average
)
dat
ggplot(data=dat, aes(x=Year, y=Average, group=Sex, colour=Sex)) +
geom_line()
library(ggplot2)
dat <- data.frame(
Sex = factor(c("Male", "Male", "Male", "Female", "Female", "Female")),
Year = factor(c("101","103","105"), levels=c("101","103","105")),
Average = Total_Average
)
dat
ggplot(data=dat, aes(x=Year, y=Average, group=Sex, colour=Sex)) +
geom_line()
library(ggplot2)
dat <- data.frame(
Sex = factor(c("Male", "Male", "Male", "Female", "Female", "Female")),
Year = factor(c("2012","2014","2016"), levels=c("2012","2014","2016")),
Average = Total_Average
)
dat
ggplot(data=dat, aes(x=Year, y=Average, group=Sex, colour=Sex)) +
geom_line()
# You can go ahead and run this - you'll need it later in the lab!
install.packages("ggplot2")
install.packages("reshape2")
install.packages("ggplot2")
install.packages("ggplot2")
# Go ahead and run this as well
library(ggplot2)
library(reshape2)
# Use this space to load the data frames (i.e. put the data frame load instruction below):
q1 <- read.csv("Practice/quartet_data/quartet1.csv")
# Use this space to load the data frames (i.e. put the data frame load instruction below):
q1 <- read.csv("Practice/quartet_data/quartet1.csv")
q2 <- read.csv("Practice/quartet_data/quartet2.csv")
q3 <- read.csv("Practice/quartet_data/quartet3.csv")
q4 <- read.csv("Practice/quartet_data/quartet4.csv")
# Display all four plots in the same window (You don't need to know this)
par(mfrow=c(2,2))
# Complete these plots:
plot(q1)
plot(q2)
plot(q3)
plot(q4)
rent <- read.csv("Practice/archive/rent.csv")
View(rent)
